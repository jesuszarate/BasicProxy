from socket import *
import sys
import re
import urlparse

CRLF = "\r\n\r\n"

if len(sys.argv) <= 1:
    print('Usage : "python proxy.py PORT"\n[PORT : The port you want to connect to]')
    sys.exit(2)

serverPort = sys.argv[1]

if not str.isdigit(serverPort):
    print('Error: Port number must be a number')
    sys.exit(2)

serverPort = int(serverPort)

print ('Listening on port: ' +serverPort)

serverSocket = socket(AF_INET, SOCK_STREAM)

serverSocket.bind(('', serverPort))
serverSocket.listen(1)
print ('The server is ready to receive')


def checkFormat(list):
    if not re.match('([GET]|[get])', list[0]):
        return False

    if not re.match('\w+', list[1]):
        print ('We are not in business :(')
        return False

    return True


def closeSocket():
    print ('Closing socket...')
    connectionSocket.close()
    print ('Socket closed!')

def GET(connectionSocket, url, httpVersion):
    url = urlparse.urlparse(url)

    port = 80
    host = '/'
    if url.port is not None:
        port = url.port
        print ('Port: ' + str(port))

    if url.path is not None:
        host = url.netloc
        print 'Host: ' + host

    print url.netloc

    # connectionSocket.connect((host, port))
    # connectionSocket.send("GET / " + httpVersion % CRLF)
    # data = (connectionSocket.recv(1000000))
    # print data


while 1:
    connectionSocket, addr = serverSocket.accept()
    message = connectionSocket.recv(1024).decode()
    print('Message received.\n')

    # Check proper format
    requestParams = message.split()

    if checkFormat(requestParams):

        GET(connectionSocket, requestParams[1], requestParams[2])

        print('Converting to upper case...')
        capitalizesSentence = message.upper()
        print'Converted' + message + ' to upper case.\n'

        print ('Sending message...')
        connectionSocket.send(capitalizesSentence.encode())
        print ('Message sent.\n')

    else:

        connectionSocket.send(
            "The header format was incorrect. Make sure it\'s in the following format: \n<METHOD> <URL> <HTTP VERSION>".encode())

    closeSocket()
