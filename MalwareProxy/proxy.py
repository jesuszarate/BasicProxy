from socket import *
import sys
import re
import urlparse

CRLF = "\r\n\r\n"

if len(sys.argv) <= 1:
    print('Usage : "python proxy.py PORT"\n[PORT : The port you want to connect to]')
    sys.exit(2)

serverPort = sys.argv[1]

if not str.isdigit(serverPort):
    print('Error: Port number must be a number')
    sys.exit(2)

serverPort = int(serverPort)

print ('Listening on port: ' + str(serverPort))

# TODO: make an init
#  Socket initialization
serverSocket = socket(AF_INET, SOCK_STREAM)
serverSocket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
serverSocket.bind(('', serverPort))
serverSocket.listen(100)

print ('The server is ready to receive...')


def check_format(list):
    if not re.match('([GET]|[get])', list[0]):
        print "HTTP/1.0 501 Not Implemented"
        return False, "HTTP/1.0 501 Not Implemented"

    if not re.match('\w+', list[1]):
        print "HTTP/1.0 400 Bad Request"
        return False, "HTTP/1.0 400 Bad Request"

    return True, "HTTP/1.0 200 OK"


def close_socket(socket_connection):
    print ('Closing socket...')
    socket_connection.close()
    print ('Socket closed!')


def GET(url, http_version):
    url = urlparse.urlparse(url)

    port = 80
    host = '/'
    if url.port is not None:
        port = url.port
        print ('Port: ' + str(port))

    if url.path is not None:
        host = url.netloc
        print 'Host: ' + host

    print url.netloc

    forwardSocket = socket(AF_INET, SOCK_STREAM)
    forwardSocket.settimeout(0.30)

    forwardSocket.connect((host, port))

    http_version = "GET / " + http_version + "%s" % CRLF
    print ("http version " + http_version)

    forwardSocket.send(http_version)
    data = (forwardSocket.recv(1000000))
    close_socket(forwardSocket)
    return data


while 1:
    connectionSocket, addr = serverSocket.accept()
    message = connectionSocket.recv(1024).decode()
    print('Message received.\n')

    # Check proper format
    requestParams = message.split()

    # Make sure it's in the following format <METHOD> <URL> <HTTP VERSION>
    status = check_format(requestParams)
    if status[0]:

        if len(requestParams) == 3:
            data = GET(requestParams[1], requestParams[2])
            connectionSocket.send(data)

    else:

        connectionSocket.send(status[1]).encode()


    close_socket(connectionSocket)
