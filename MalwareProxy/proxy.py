from socket import *
import sys
import re
import urlparse

CRLF = "\r\n\r\n"

e_501 = "HTTP/1.0 501 Not Implemented\r\n"
e_400 = "HTTP/1.0 400 Bad Request\r\n"
e_200 = "HTTP/1.0 200 OK\r\n"

if len(sys.argv) <= 1:
    print('Usage : "python proxy.py PORT"\n[PORT : The port you want to connect to]')
    sys.exit(2)

serverPort = sys.argv[1]

if not str.isdigit(serverPort):
    print('Error: Port number must be a number')
    sys.exit(2)

serverPort = int(serverPort)

print ('Listening on port: ' + str(serverPort))

# TODO: make this an init
#  Socket initialization to start communication with the client
serverSocket = socket(AF_INET, SOCK_STREAM)
serverSocket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
serverSocket.bind(('', serverPort))
serverSocket.listen(100)

print ('The server is ready to receive...')


def check_format(list):
    if not re.match('([GET]|[get])', list[0]):
        print e_501
        return False, e_501

    if not re.match('\w+', list[1]):
        print e_400
        return False, e_400

    return True, e_200


def close_socket(socket_connection):
    print ('Closing socket...')
    socket_connection.close()
    print ('Socket closed!')


def GET(url, http_version, headers):
    url = urlparse.urlparse(url)

    port = 80
    host = '/'
    path = ''
    if url.port is not None:
        port = url.port
        print ('Port: ' + str(port))

    if url.netloc is not None:
        host = url.netloc
        print 'Host: ' + host

    if url.path is not None:
        path = url.path

    print url.netloc

    forwardSocket = socket(AF_INET, SOCK_STREAM)
    forwardSocket.settimeout(0.30)

    forwardSocket.connect((host, port))

    http_version = "GET / %s %s \nConnection: close %s" % (http_version, CRLF, CRLF)

    # http_version = http_version + "\nConnection: close"
    print ("http version " + http_version)

    forwardSocket.send(http_version)
    data = (forwardSocket.recv(1000000))
    close_socket(forwardSocket)
    return data


def gather_headers(connection_socket):
    headers = []
    while 1:
        # connection_socket, addr = server_socket.accept()
        message = connection_socket.recv(1024).decode()

        if not re.match("\w+:?\w+", message):
            if message == "\r\n":
                return headers

        headers.append(message)


while 1:
    connectionSocket, addr = serverSocket.accept()
    message = connectionSocket.recv(1024).decode()
    print('Message received.\n')

    # Check proper format
    requestParams = message.split()

    # Make sure it's in the following format <METHOD> <URL> <HTTP VERSION>
    status = check_format(requestParams)
    if status[0]:

        if len(requestParams) == 3:
            headers = gather_headers(connectionSocket)

            data = GET(requestParams[1], requestParams[2], headers)
            connectionSocket.send(data)

    else:
        connectionSocket.send(status[1].encode())

    close_socket(connectionSocket)
